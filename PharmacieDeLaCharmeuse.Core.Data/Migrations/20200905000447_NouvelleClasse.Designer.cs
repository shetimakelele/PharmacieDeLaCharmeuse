// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacieDeLaCharmeuse.Core.Data;

namespace PharmacieDeLaCharmeuse.Core.Data.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20200905000447_NouvelleClasse")]
    partial class NouvelleClasse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.Astuce", b =>
                {
                    b.Property<int>("AstuceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategorieAstuceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEdition")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionCourte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("imageModelImageId")
                        .HasColumnType("int");

                    b.HasKey("AstuceId");

                    b.HasIndex("CategorieAstuceId");

                    b.HasIndex("imageModelImageId");

                    b.ToTable("Astuce");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.AstuceDuMois", b =>
                {
                    b.Property<int>("AstuceDuMoisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AstuceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Mois")
                        .HasColumnType("datetime2");

                    b.HasKey("AstuceDuMoisID");

                    b.HasIndex("AstuceId");

                    b.ToTable("AstuceDuMois");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.CategorieAstuce", b =>
                {
                    b.Property<int>("CategorieAstuceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionCategorieAstuce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomCategorieAstuce")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieAstuceID");

                    b.ToTable("CategorieAstuce");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.CategorieProduit", b =>
                {
                    b.Property<int>("CategorieProduitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionCategorieProduit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomCategorieProduit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieProduitID");

                    b.ToTable("CategorieProduit");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.ImageModel", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitreImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.Information", b =>
                {
                    b.Property<int>("InformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InformationId");

                    b.ToTable("Information");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.Produit", b =>
                {
                    b.Property<int>("ProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategorieProduitId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionCourte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionLongue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnStock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageModelId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.Property<float>("PrixPromo")
                        .HasColumnType("real");

                    b.HasKey("ProduitId");

                    b.HasIndex("CategorieProduitId");

                    b.HasIndex("ImageModelId");

                    b.ToTable("Produit");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.ProduitDuMois", b =>
                {
                    b.Property<int>("ProduitDuMoisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Mois")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("ProduitDuMoisId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ProduitDuMois");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.TestDuMois", b =>
                {
                    b.Property<int>("TestDuMoisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Mois")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestProduitId")
                        .HasColumnType("int");

                    b.HasKey("TestDuMoisId");

                    b.ToTable("TestDuMois");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.TestProduit", b =>
                {
                    b.Property<int>("TestProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEdition")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionCourte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteTest")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestProduitId");

                    b.ToTable("TestProduit");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.Astuce", b =>
                {
                    b.HasOne("PharmacieDeLaCharmeuse.Core.Data.Models.CategorieAstuce", "categorieAstuce")
                        .WithMany("Astuces")
                        .HasForeignKey("CategorieAstuceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacieDeLaCharmeuse.Core.Data.Models.ImageModel", "imageModel")
                        .WithMany()
                        .HasForeignKey("imageModelImageId");
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.AstuceDuMois", b =>
                {
                    b.HasOne("PharmacieDeLaCharmeuse.Core.Data.Models.Astuce", "astuce")
                        .WithMany()
                        .HasForeignKey("AstuceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.Produit", b =>
                {
                    b.HasOne("PharmacieDeLaCharmeuse.Core.Data.Models.CategorieProduit", "categorieProduit")
                        .WithMany("Produits")
                        .HasForeignKey("CategorieProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacieDeLaCharmeuse.Core.Data.Models.ImageModel", "imageModel")
                        .WithMany()
                        .HasForeignKey("ImageModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacieDeLaCharmeuse.Core.Data.Models.ProduitDuMois", b =>
                {
                    b.HasOne("PharmacieDeLaCharmeuse.Core.Data.Models.Produit", "produit")
                        .WithMany()
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
